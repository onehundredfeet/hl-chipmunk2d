
// ---------------------------------------------------------------------------------------------------------
// chipmunk_types.h
//----------------------------------------------------------------------------------------------------------
typedef cpFloat double;
typedef cpBool uchar;
typedef cpDataPointer VoidPtr;
typedef cpGroup int64;
typedef cpBitmask uint;


// ---------------------------------------------------------------------------------------------------------
// Vect.h
//----------------------------------------------------------------------------------------------------------
[Internal="cpVect"]
interface Vect
{
	attribute cpFloat x;
    attribute cpFloat y;
	
	void Vect();

	[Static,Value] Vect cpv([Const] cpFloat x, [Const] cpFloat y);

	[Static] cpBool cpveql([Const,Deref] Vect v1, [Const,Deref] Vect v2);

	[Static,Value] Vect cpvadd([Const,Deref] Vect v1, [Const,Deref] Vect v2);

	[Static,Value] Vect cpvsub([Const,Deref] Vect v1, [Const,Deref] Vect v2);

	[Static,Value] Vect cpvneg([Const,Deref] Vect v);

	[Static,Value] Vect cpvmult([Const,Deref] Vect v, [Const] cpFloat s);

	[Static] cpFloat cpvdot([Const,Deref] Vect v1, [Const,Deref] Vect v2);

	[Static] cpFloat cpvcross([Const,Deref] Vect v1, [Const,Deref] Vect v2);

	[Static,Value] Vect cpvperp([Const,Deref] Vect v);

	[Static,Value] Vect cpvrperp([Const,Deref] Vect v);

	[Static,Value] Vect cpvproject([Const,Deref] Vect v1, [Const,Deref] Vect v2);

	[Static,Value] Vect cpvforangle([Const] cpFloat a);

	[Static] cpFloat cpvtoangle([Const,Deref] Vect v);

	[Static,Value] Vect cpvrotate([Const,Deref] Vect v1, [Const,Deref] Vect v2);

	[Static,Value] Vect cpvunrotate([Const,Deref] Vect v1, [Const,Deref] Vect v2);

	[Static] cpFloat cpvlengthsq([Const,Deref] Vect v);

	[Static] cpFloat cpvlength([Const,Deref] Vect v);

	[Static,Value] Vect cpvlerp([Const,Deref] Vect v1, [Const,Deref] Vect v2, [Const] cpFloat t);

	[Static,Value] Vect cpvnormalize([Const,Deref] Vect v);

	[Static,Value] Vect cpvslerp([Const,Deref] Vect v1, [Const,Deref] Vect v2, [Const] cpFloat t);
	
	[Static,Value] Vect cpvslerpconst([Const,Deref] Vect v1, [Const,Deref] Vect v2, [Const] cpFloat a);
	
	[Static,Value] Vect cpvclamp([Const,Deref] Vect v, [Const] cpFloat len);
	
	[Static,Value] Vect cpvlerpconst([Deref] Vect v1, [Deref] Vect v2, cpFloat d);
	
	[Static] cpFloat cpvdist([Const,Deref] Vect v1, [Const,Deref] Vect v2);
	
	[Static] cpFloat cpvdistsq([Const,Deref] Vect v1, [Const,Deref] Vect v2);
	
	[Static] cpBool cpvnear([Const,Deref] Vect v1, [Const,Deref] Vect v2, [Const] cpFloat dist);
};


// ---------------------------------------------------------------------------------------------------------
// cpTransform.h
//----------------------------------------------------------------------------------------------------------
interface cpTransform 
{
	attribute cpFloat a;
	attribute cpFloat b;
	attribute cpFloat c;
	attribute cpFloat d;
	attribute cpFloat tx; 
	attribute cpFloat ty;

	void cpTransform();

	[Static,Value] cpTransform cpTransformNew(cpFloat a, cpFloat b, cpFloat c, cpFloat d, cpFloat tx, cpFloat ty);

	[Static,Value] cpTransform cpTransformNewTranspose(cpFloat a, cpFloat c, cpFloat tx, cpFloat b, cpFloat d, cpFloat ty);

	[Static,Value] cpTransform cpTransformInverse([Deref] cpTransform t);

	[Static,Value] cpTransform cpTransformMult([Deref] cpTransform t1, [Deref] cpTransform t2);

	[Static,Value] Vect cpTransformPoint([Deref] cpTransform t, [Deref] Vect p);

	[Static,Value] Vect cpTransformVect([Deref] cpTransform t, [Deref] Vect v);

	[Static,Value] cpBB cpTransformbBB([Deref] cpTransform t, [Deref] cpBB bb);

	[Static,Value] cpTransform cpTransformTranslate([Deref] Vect translate);

	[Static,Value] cpTransform cpTransformScale(cpFloat scaleX, cpFloat scaleY);

	[Static,Value] cpTransform cpTransformRotate(cpFloat radians);

	[Static,Value] cpTransform cpTransformRigid([Deref] Vect translate, cpFloat radians);

	[Static,Value] cpTransform cpTransformRigidInverse([Deref] cpTransform t);

	[Static,Value] cpTransform cpTransformWrap([Deref] cpTransform outer, [Deref] cpTransform inner);

	[Static,Value] cpTransform cpTransformWrapInverse([Deref] cpTransform outer, [Deref] cpTransform inner);

	[Static,Value] cpTransform cpTransformOrtho([Deref] cpBB bb);

	[Static,Value] cpTransform cpTransformBoneScale([Deref] Vect v0, [Deref] Vect v1);

	[Static,Value] cpTransform cpTransformAxialScale([Deref] Vect axis, [Deref] Vect pivot, cpFloat scale);
};



interface cpMat2x2 {
	void cpMat2x2();
	attribute cpFloat a; 
	attribute cpFloat b;
	attribute cpFloat c;
	attribute cpFloat d;
};


// ---------------------------------------------------------------------------------------------------------
// cpBB.h
//----------------------------------------------------------------------------------------------------------
interface cpBB
{
    void cpBB();
    attribute cpFloat l;
    attribute cpFloat b;
    attribute cpFloat r;
    attribute cpFloat t;
	
	[Static,Value] cpBB cpBBNew([Const] cpFloat l, [Const] cpFloat b, [Const] cpFloat r, [Const] cpFloat t);
	[Static,Value] cpBB cpBBNewForExtents([Const,Deref] Vect c, [Const] cpFloat hw, [Const] cpFloat hh);
	[Static,Value] cpBB cpBBNewForCircle([Const,Deref] Vect p, [Const] cpFloat r);
	[Static] cpBool cpBBIntersects([Const,Deref] cpBB a, [Const,Deref] cpBB b);
	[Static] cpBool cpBBContainsBB([Const,Deref] cpBB bb, [Const,Deref] cpBB other);
	[Static] cpBool cpBBContainsVect([Const,Deref] cpBB bb, [Const,Deref] Vect v);
	[Static,Value] cpBB cpBBMerge([Const,Deref] cpBB a, [Const,Deref] cpBB b);
	[Static,Value] cpBB cpBBExpand([Const,Deref] cpBB bb, [Const,Deref] Vect v);
	[Static,Value] Vect cpBBCenter([Deref] cpBB bb);
	[Static] cpFloat cpBBArea([Deref] cpBB bb);
	[Static] cpFloat cpBBMergedArea([Deref] cpBB a, [Deref] cpBB b);
	[Static] cpFloat cpBBSegmentQuery([Deref] cpBB bb, [Deref] Vect a, [Deref] Vect b);
	[Static] cpBool cpBBIntersectsSegment([Deref] cpBB bb, [Deref] Vect a, [Deref] Vect b);
	[Static,Value] Vect cpBBClampVect([Const,Deref] cpBB bb, [Const,Deref] Vect v);
	[Static,Value] Vect cpBBWrapVect([Const,Deref] cpBB bb, [Const,Deref] Vect v);
	[Static,Value] cpBB cpBBOffset([Const,Deref] cpBB bb, [Const,Deref] Vect v);
};


// ---------------------------------------------------------------------------------------------------------
// Body.h
//----------------------------------------------------------------------------------------------------------
// enum BodyTypeHL {
// 	"CP_BODY_TYPE_DYNAMIC",
// 	"CP_BODY_TYPE_KINEMATIC",
// 	"CP_BODY_TYPE_STATIC"
// };

[Internal="cpBody"]	
interface Body {
	
	[Static, Internal="cpBodyAlloc"] Body alloc();

	[Static, Internal="cpBodyInit"] Body init(Body body, cpFloat mass, cpFloat moment);

	[Static, Internal="cpBodyNew"] Body makeNew(cpFloat mass, cpFloat moment);

	[Static, Internal="cpBodyNewKinematic"] Body newKinematic();

	[Static, Internal="cpBodyNewStatic"] Body newStatic();

	[CObject, Internal="cpBodyDestroy"] void destroy();
	
	[CObject, Internal="cpBodyFree"] void free();

	[CObject, Internal="cpBodyActivate"] void activate();

	//[CObject] void BodyActivateStatic( cpShape filter);

	[CObject, Internal="cpBodySleep"] void sleep();

	[CObject, Internal="cpBodySleepWithGroup"] void sleepWithGroup(Body group);

	[CObject, Internal="cpBodyIsSleeping"] cpBool isSleeping();

	//[CObject] BodyType BodyGetType();

	//[CObject] void BodySetType(BodyType type);

	// [CObject] cpSpace BodyGetSpace();

	[CObject, Internal="cpBodyGetMass"] cpFloat BodyGetMass();

	[CObject, Internal="cpBodySetMass"] void BodySetMass(cpFloat m);

	[CObject, Internal="cpBodyGetMoment"] cpFloat BodyGetMoment();

	[CObject, Internal="cpBodySetMoment"] void BodySetMoment(cpFloat i);

	[CObject,Value, Internal="cpBodyGetPosition"] Vect getPosition();

	[CObject, Internal="cpBodySetPosition"] void setPosition([Deref] Vect pos);

	[CObject,Value, Internal="cpBodyGetCenterOfGravity"] Vect BodyGetCenterOfGravity();
	
	[CObject, Internal="cpBodySetCenterOfGravity"] void BodySetCenterOfGravity([Deref] Vect cog);

	[CObject,Value, Internal="cpBodyGetVelocity"] Vect BodyGetVelocity();

	[CObject, Internal="cpBodySetVelocity"] void BodySetVelocity([Deref] Vect velocity);

	[CObject,Value, Internal="cpBodyGetForce"] Vect BodyGetForce();

	[CObject, Internal="cpBodySetForce"] void BodySetForce([Deref] Vect force);

	[CObject, Internal="cpBodyGetAngle"] cpFloat BodyGetAngle();

	[CObject, Internal="cpBodySetAngle"] void BodySetAngle(cpFloat a);

	[CObject, Internal="cpBodyGetAngularVelocity"] cpFloat BodyGetAngularVelocity();

	[CObject, Internal="cpBodySetAngularVelocity"] void BodySetAngularVelocity(cpFloat angularVelocity);

	[CObject, Internal="cpBodyGetTorque"] cpFloat BodyGetTorque();

	[CObject, Internal="cpBodySetTorque"] void BodySetTorque(cpFloat torque);

	[CObject,Value, Internal="cpBodyGetRotation"] Vect BodyGetRotation();

	//[CObject] cpDataPointer BodyGetUserData();

	//[CObject] void BodySetUserData(cpDataPointer userData);

	// [CObject] void BodySetVelocityUpdateFunc(BodyVelocityFunc velocityFunc); // TODO

	// [CObject] void BodySetPositionUpdateFunc(BodyPositionFunc positionFunc); // TODO

	[CObject, Internal="cpBodyUpdateVelocity"] void BodyUpdateVelocity([Deref] Vect gravity, cpFloat damping, cpFloat dt);
	
	[CObject, Internal="cpBodyUpdatePosition"] void BodyUpdatePosition(cpFloat dt);

	[CObject,Value, Internal="cpBodyLocalToWorld"] Vect BodyLocalToWorld([Const,Deref] Vect point);

	[CObject,Value, Internal="cpBodyWorldToLocal"] Vect BodyWorldToLocal([Const,Deref] Vect point);

	[CObject, Internal="cpBodyApplyForceAtWorldPoint"] void BodyApplyForceAtWorldPoint([Deref] Vect force, [Deref] Vect point);

	[CObject, Internal="cpBodyApplyForceAtLocalPoint"] void BodyApplyForceAtLocalPoint([Deref] Vect force, [Deref] Vect point);

	[CObject, Internal="cpBodyApplyImpulseAtWorldPoint"] void BodyApplyImpulseAtWorldPoint([Deref] Vect impulse, [Deref] Vect point);
	
	[CObject, Internal="cpBodyApplyImpulseAtLocalPoint"] void BodyApplyImpulseAtLocalPoint([Deref] Vect impulse, [Deref] Vect point);

	[CObject,Value, Internal="cpBodyGetVelocityAtWorldPoint"] Vect BodyGetVelocityAtWorldPoint([Deref] Vect point);
	
	[CObject,Value, Internal="cpBodyGetVelocityAtLocalPoint"]  Vect BodyGetVelocityAtLocalPoint([Deref] Vect point);

	[CObject, Internal="cpBodyKineticEnergy"] cpFloat BodyKineticEnergy();

	// TODO
	// [CObject] void BodyEachShape(BodyShapeIteratorFunc func, void *data);

	// [CObject] void BodyEachConstraint(BodyConstraintIteratorFunc func, void *data);

	// [CObject] void BodyEachArbiter(BodyArbiterIteratorFunc func, void *data);
};


// ---------------------------------------------------------------------------------------------------------
// cpShape.h
//----------------------------------------------------------------------------------------------------------

interface cpPointQueryInfo 
{
	void cpPointQueryInfo();
	[Const] attribute Shape shape;
	[Value] attribute Vect point;
	attribute cpFloat distance;
	[Value] attribute Vect gradient;
};

interface cpSegmentQueryInfo {
	void cpSegmentQueryInfo();
	[Const] attribute Shape shape;
	[Value] attribute Vect point;
	[Value] attribute Vect normal;
	attribute cpFloat alpha;
};

interface cpShapeFilter {
	void cpShapeFilter();
	attribute int64 group;
	attribute cpBitmask categories;
	attribute cpBitmask mask;
};

[Internal="cpShape"]
interface Shape
{

	[Static,Value] cpShapeFilter cpShapeFilterNew(cpGroup group, cpBitmask categories, cpBitmask mask);

	[CObject] void cpShapeDestroy();

	[CObject] void cpShapeFree();

	[CObject,Value] cpBB cpShapeCacheBB();

	[CObject,Value] cpBB cpShapeUpdate([Deref] cpTransform transform);

	[CObject] cpFloat cpShapePointQuery([Deref] Vect p, cpPointQueryInfo out);

	[CObject] cpBool cpShapeSegmentQuery([Deref] Vect a, [Deref] Vect b, cpFloat radius, cpSegmentQueryInfo info);

	[Static,Value] cpContactPointSet cpShapesCollide([Const] Shape a, [Const] Shape b);

	[CObject] Space cpShapeGetSpace();

	[CObject] Body cpShapeGetBody();

	[CObject] void cpShapeSetBody(Body body);

	[CObject] cpFloat cpShapeGetMass();

	[CObject] void cpShapeSetMass(cpFloat mass);

	[CObject] cpFloat cpShapeGetDensity();

	[CObject] void cpShapeSetDensity(cpFloat density);

	[CObject] cpFloat cpShapeGetMoment();

	[CObject] cpFloat cpShapeGetArea();

	[CObject,Value] Vect cpShapeGetCenterOfGravity();

	[CObject,Value] cpBB cpShapeGetBB();

	[CObject] cpBool cpShapeGetSensor();

	[CObject] void cpShapeSetSensor(cpBool sensor);

	[CObject] cpFloat cpShapeGetElasticity();

	[CObject] void cpShapeSetElasticity(cpFloat elasticity);

	[CObject] cpFloat cpShapeGetFriction();

	[CObject] void cpShapeSetFriction(cpFloat friction);

	[CObject,Value] Vect cpShapeGetSurfaceVelocity();

	[CObject] void cpShapeSetSurfaceVelocity([Deref] Vect surfaceVelocity);

	[CObject] cpDataPointer cpShapeGetUserData();

	[CObject] void cpShapeSetUserData(cpDataPointer userData);

	// [CObject] cpCollisionType cpShapeGetCollisionType();

	// [CObject] void cpShapeSetCollisionType(cpCollisionType collisionType);

	[CObject,Value] cpShapeFilter cpShapeGetFilter();

	[CObject] void cpShapeSetFilter([Deref] cpShapeFilter filter);
};


interface cpCircleShape
{
	[Static] cpCircleShape cpCircleShapeAlloc();
	[Static] cpCircleShape cpCircleShapeInit(cpCircleShape circle, Body body, cpFloat radius, [Deref] Vect offset);
	[Static] Shape cpCircleShapeNew(Body body, cpFloat radius, [Deref] Vect offset);
	[Static,Value] Vect cpCircleShapeGetOffset([Const] Shape shape);
	[Static] cpFloat cpCircleShapeGetRadius([Const] Shape shape);
};


interface cpSegmentShape
{
	[Static] cpSegmentShape cpSegmentShapeAlloc();

	[Static] cpSegmentShape cpSegmentShapeInit(cpSegmentShape seg, Body body, 
				[Deref] Vect a, [Deref] Vect b, cpFloat radius);

	[Static] Shape cpSegmentShapeNew(Body body, [Deref] Vect a, [Deref] Vect b, cpFloat radius);

	[Static] void cpSegmentShapeSetNeighbors(Shape shape, [Deref] Vect prev, [Deref] Vect next);

	[Static,Value] Vect cpSegmentShapeGetA([Const] Shape shape);

	[Static,Value] Vect cpSegmentShapeGetB([Const] Shape shape);

	[Static,Value] Vect cpSegmentShapeGetNormal([Const] Shape shape);

	[Static] cpFloat cpSegmentShapeGetRadius([Const] Shape shape);
};

// ---------------------------------------------------------------------------------------------------------
// cpSpace.h
//----------------------------------------------------------------------------------------------------------

[Internal="cpSpace"]
interface Space
{
	[Static] Space cpSpaceInit(Space space);

	[Static] Space cpSpaceNew();

	[CObject] void cpSpaceDestroy();

	[CObject] void cpSpaceFree();

	[CObject] int cpSpaceGetIterations();

	[CObject] void cpSpaceSetIterations(int iterations);

	[CObject,Value] Vect cpSpaceGetGravity();

	[CObject] void cpSpaceSetGravity([Deref] Vect gravity);

	[CObject] cpFloat cpSpaceGetDamping();

	[CObject] void cpSpaceSetDamping(cpFloat damping);

	[CObject] cpFloat cpSpaceGetIdleSpeedThreshold();

	[CObject] void cpSpaceSetIdleSpeedThreshold(cpFloat idleSpeedThreshold);

	[CObject] cpFloat cpSpaceGetSleepTimeThreshold();

	[CObject] void cpSpaceSetSleepTimeThreshold(cpFloat sleepTimeThreshold);

	[CObject] cpFloat cpSpaceGetCollisionSlop();

	[CObject] void cpSpaceSetCollisionSlop(cpFloat collisionSlop);

	[CObject] cpFloat cpSpaceGetCollisionBias();

	[CObject] void cpSpaceSetCollisionBias(cpFloat collisionBias);

	// [CObject] cpTimestamp cpSpaceGetCollisionPersistence();

	// [CObject] void cpSpaceSetCollisionPersistence(cpTimestamp collisionPersistence);

	[CObject] cpDataPointer cpSpaceGetUserData();

	[CObject] void cpSpaceSetUserData(cpDataPointer userData);

	[CObject, Internal="cpSpaceGetStaticBody"] Body getStaticBody();

	[CObject] cpFloat cpSpaceGetCurrentTimeStep();

	[CObject] cpBool cpSpaceIsLocked();

	// [CObject] cpCollisionHandler *cpSpaceAddDefaultCollisionHandler();

	// [CObject] cpCollisionHandler *cpSpaceAddCollisionHandler(cpCollisionType a, cpCollisionType b);

	// [CObject] cpCollisionHandler *cpSpaceAddWildcardHandler(cpCollisionType type);

	[CObject, Internal="cpSpaceAddShape"] void addShape(Shape shape); // README. I had to replace the original functions because each call was duplicating the space.

	[CObject, Internal="cpSpaceAddBody"] void addBody(Body body); // README. I had to replace the original functions because each call was duplicating the space.

	[CObject] cpConstraint cpSpaceAddConstraint(cpConstraint constraint);

	[CObject] void cpSpaceRemoveShape(Shape shape);

	[CObject] void cpSpaceRemoveBody(Body body);

	[CObject] void cpSpaceRemoveConstraint(cpConstraint constraint);

	[CObject] cpBool cpSpaceContainsShape(Shape shape);

	[CObject] cpBool cpSpaceContainsBody(Body body);

	[CObject] cpBool cpSpaceContainsConstraint(cpConstraint constraint);

	// [CObject] cpBool cpSpaceAddPostStepCallback(cpPostStepFunc func, void *key, void *data);

	// [CObject] void cpSpacePointQuery(Vect point, cpFloat maxDistance, cpShapeFilter filter, cpSpacePointQueryFunc func, void *data);

	// [CObject] cpShape cpSpacePointQueryNearest(Vect point, cpFloat maxDistance, cpShapeFilter filter, cpPointQueryInfo *out);

	// [CObject] void cpSpaceSegmentQuery(Vect start, Vect end, cpFloat radius, cpShapeFilter filter, cpSpaceSegmentQueryFunc func, void *data);

	[CObject] Shape cpSpaceSegmentQueryFirst([Deref] Vect start, [Deref] Vect end, cpFloat radius, [Deref] cpShapeFilter filter, cpSegmentQueryInfo out);
	
	[CObject] Shape cpSpaceSegmentQueryFirstNoFilter([Deref] Vect start, [Deref] Vect end, cpFloat radius, cpSegmentQueryInfo out);

	// [CObject] void cpSpaceBBQuery(cpBB bb, cpShapeFilter filter, cpSpaceBBQueryFunc func, void *data);

	// [CObject] cpBool cpSpaceShapeQuery(cpShape shape, cpSpaceShapeQueryFunc func, void *data);

	// [CObject] void cpSpaceEachBody(cpSpaceBodyIteratorFunc func, void *data);

	// [CObject] void cpSpaceEachShape(cpSpaceShapeIteratorFunc func, void *data);

	// [CObject] void cpSpaceEachConstraint(cpSpaceConstraintIteratorFunc func, void *data);

	[CObject] void cpSpaceReindexStatic();

	[CObject] void cpSpaceReindexShape(Shape shape);

	[CObject] void cpSpaceReindexShapesForBody(Body body);

	[CObject] void cpSpaceUseSpatialHash(cpFloat dim, int count);

	[CObject] void cpSpaceStep(cpFloat dt);
};


// ---------------------------------------------------------------------------------------------------------
// cpArbiter.h
//----------------------------------------------------------------------------------------------------------
interface cpContactPointSet {
	
};


interface cpArbiter
{
	[CObject] cpFloat cpArbiterGetRestitution();

	[CObject] void cpArbiterSetRestitution(cpFloat restitution);

	[CObject] cpFloat cpArbiterGetFriction();

	[CObject] void cpArbiterSetFriction(cpFloat friction);

	[CObject,Value] Vect cpArbiterGetSurfaceVelocity();

	[CObject] void cpArbiterSetSurfaceVelocity([Deref] Vect vr);

	[CObject] cpDataPointer cpArbiterGetUserData();

	[CObject] void cpArbiterSetUserData(cpDataPointer userData);

	[CObject,Value] Vect cpArbiterTotalImpulse();

	[CObject] cpFloat cpArbiterTotalKE();

	[CObject] cpBool cpArbiterIgnore();

	// CP_EXPORT void cpArbiterGetShapes(const cpArbiter *arb, cpShape **a, cpShape **b);

	// CP_EXPORT void cpArbiterGetBodies(const cpArbiter *arb, Body **a, Body **b);

	[CObject,Value] cpContactPointSet cpArbiterGetContactPointSet();

	[CObject] void cpArbiterSetContactPointSet(cpContactPointSet set);

	[CObject] cpBool cpArbiterIsFirstContact();

	[CObject] cpBool cpArbiterIsRemoval();

	[CObject] int cpArbiterGetCount();

	[CObject,Value] Vect cpArbiterGetNormal();

	[CObject,Value] Vect cpArbiterGetPointA(int i);

	[CObject,Value] Vect cpArbiterGetPointB(int i);

	[CObject] cpFloat cpArbiterGetDepth(int i);

	[CObject] cpBool cpArbiterCallWildcardBeginA(Space space);

	[CObject] cpBool cpArbiterCallWildcardBeginB(Space space);

	[CObject] cpBool cpArbiterCallWildcardPreSolveA(Space space);

	[CObject] cpBool cpArbiterCallWildcardPreSolveB(Space space);

	[CObject] void cpArbiterCallWildcardPostSolveA(Space space);

	[CObject] void cpArbiterCallWildcardPostSolveB(Space space);

	[CObject] void cpArbiterCallWildcardSeparateA(Space space);

	[CObject] void cpArbiterCallWildcardSeparateB(Space space);
};


// ---------------------------------------------------------------------------------------------------------
// cpConstraint.h
//----------------------------------------------------------------------------------------------------------

interface cpConstraint
{
	[CObject] void cpConstraintDestroy();

	[CObject] void cpConstraintFree();

	[CObject] Space cpConstraintGetSpace();

	[CObject] Body cpConstraintGetBodyA();

	[CObject] Body cpConstraintGetBodyB();

	[CObject] cpFloat cpConstraintGetMaxForce();
	
	[CObject] void cpConstraintSetMaxForce(cpFloat maxForce);

	[CObject] cpFloat cpConstraintGetErrorBias();

	[CObject] void cpConstraintSetErrorBias(cpFloat errorBias);

	[CObject] cpFloat cpConstraintGetMaxBias();

	[CObject] void cpConstraintSetMaxBias(cpFloat maxBias);

	[CObject] cpBool cpConstraintGetCollideBodies();

	[CObject] void cpConstraintSetCollideBodies(cpBool collideBodies);

	//[CObject] cpConstraintPreSolveFunc cpConstraintGetPreSolveFunc();

	//[CObject] void cpConstraintSetPreSolveFunc(cpConstraintPreSolveFunc preSolveFunc);

	//[CObject] cpConstraintPostSolveFunc cpConstraintGetPostSolveFunc();

	//[CObject] void cpConstraintSetPostSolveFunc(cpConstraintPostSolveFunc postSolveFunc);

	[CObject] cpDataPointer cpConstraintGetUserData();

	[CObject] void cpConstraintSetUserData(cpDataPointer userData);

	[CObject] cpFloat cpConstraintGetImpulse();
};


// ---------------------------------------------------------------------------------------------------------
// cpDampedRotarySpring.h
//----------------------------------------------------------------------------------------------------------

interface cpDampedRotarySpring
{
	[Static] cpBool cpConstraintIsDampedRotarySpring([Const] cpConstraint constraint);

	[Static] cpDampedRotarySpring cpDampedRotarySpringAlloc();

	[Static] cpDampedRotarySpring cpDampedRotarySpringInit(cpDampedRotarySpring joint, 
			Body a, Body b, cpFloat restAngle, cpFloat stiffness, cpFloat damping);

	[Static] cpConstraint cpDampedRotarySpringNew(Body a, Body b, cpFloat restAngle, 
			cpFloat stiffness, cpFloat damping);

	[Static] cpFloat cpDampedRotarySpringGetRestAngle([Const] cpConstraint constraint);

	[Static] void cpDampedRotarySpringSetRestAngle(cpConstraint constraint, cpFloat restAngle);

	[Static] cpFloat cpDampedRotarySpringGetStiffness([Const] cpConstraint constraint);

	[Static] void cpDampedRotarySpringSetStiffness([Const] cpConstraint constraint, cpFloat stiffness);

	[Static] cpFloat cpDampedRotarySpringGetDamping([Const] cpConstraint constraint);

	[Static] void cpDampedRotarySpringSetDamping(cpConstraint constraint, cpFloat damping);

	// [Static] cpDampedRotarySpringTorqueFunc cpDampedRotarySpringGetSpringTorqueFunc(const cpConstraint *constraint);

	//[Static] void cpDampedRotarySpringSetSpringTorqueFunc(cpConstraint *constraint, cpDampedRotarySpringTorqueFunc springTorqueFunc);
};


// ---------------------------------------------------------------------------------------------------------
// cpDampedSpring.h
//----------------------------------------------------------------------------------------------------------

interface cpDampedSpring
{
	[Static] cpBool cpConstraintIsDampedSpring([Const] cpConstraint constraint);

	[Static] cpDampedSpring cpDampedSpringAlloc();

	[Static] cpDampedSpring cpDampedSpringInit(cpDampedSpring joint, Body a, Body b, 
			[Deref] Vect anchorA, [Deref] Vect anchorB, cpFloat restLength, cpFloat stiffness, cpFloat damping);

	[Static] cpConstraint cpDampedSpringNew(Body a, Body b, [Deref] Vect anchorA, [Deref] Vect anchorB, 
			cpFloat restLength, cpFloat stiffness, cpFloat damping);

	[Static,Value] Vect cpDampedSpringGetAnchorA([Const] cpConstraint constraint);

	[Static] void cpDampedSpringSetAnchorA(cpConstraint constraint, [Deref] Vect anchorA);

	[Static,Value] Vect cpDampedSpringGetAnchorB([Const] cpConstraint constraint);

	[Static] void cpDampedSpringSetAnchorB(cpConstraint constraint, [Deref] Vect anchorB);

	[Static] cpFloat cpDampedSpringGetRestLength([Const] cpConstraint constraint);

	[Static] void cpDampedSpringSetRestLength(cpConstraint constraint, cpFloat restLength);

	[Static] cpFloat cpDampedSpringGetStiffness([Const] cpConstraint constraint);

	[Static] void cpDampedSpringSetStiffness(cpConstraint constraint, cpFloat stiffness);

	[Static] cpFloat cpDampedSpringGetDamping([Const] cpConstraint constraint);

	[Static] void cpDampedSpringSetDamping(cpConstraint constraint, cpFloat damping);

	// [Static] cpDampedSpringForceFunc cpDampedSpringGetSpringForceFunc(const cpConstraint *constraint);

	// [Static] void cpDampedSpringSetSpringForceFunc(cpConstraint *constraint, cpDampedSpringForceFunc springForceFunc);
};


// ---------------------------------------------------------------------------------------------------------
// cpGearJoint.h
//----------------------------------------------------------------------------------------------------------

interface cpGearJoint
{
	[Static] cpBool cpConstraintIsGearJoint([Const]  cpConstraint constraint);

	[Static] cpGearJoint cpGearJointAlloc();

	[Static] cpGearJoint cpGearJointInit(cpGearJoint joint, Body a, Body b, cpFloat phase, cpFloat ratio);

	[Static] cpConstraint cpGearJointNew(Body a, Body b, cpFloat phase, cpFloat ratio);

	[Static] cpFloat cpGearJointGetPhase([Const] cpConstraint constraint);

	[Static] void cpGearJointSetPhase(cpConstraint constraint, cpFloat phase);

	[Static] cpFloat cpGearJointGetRatio([Const] cpConstraint constraint);

	[Static] void cpGearJointSetRatio(cpConstraint constraint, cpFloat ratio);
};


// ---------------------------------------------------------------------------------------------------------
// cpSimpleMotor.h
//----------------------------------------------------------------------------------------------------------

interface cpSimpleMotor
{
	[Static] cpBool cpConstraintIsSimpleMotor([Const] cpConstraint constraint);

	[Static] cpSimpleMotor cpSimpleMotorAlloc();

	[Static] cpSimpleMotor cpSimpleMotorInit(cpSimpleMotor joint, Body a, Body b, cpFloat rate);

	[Static] cpConstraint cpSimpleMotorNew(Body a, Body b, cpFloat rate);

	[Static] cpFloat cpSimpleMotorGetRate([Const] cpConstraint constraint);

	[Static] void cpSimpleMotorSetRate(cpConstraint constraint, cpFloat rate);
};


// ---------------------------------------------------------------------------------------------------------
// cpGrooveJoint.h
//----------------------------------------------------------------------------------------------------------

interface cpGrooveJoint
{
	[Static] cpBool cpConstraintIsGrooveJoint([Const] cpConstraint constraint);

	[Static] cpGrooveJoint cpGrooveJointAlloc();

	[Static] cpGrooveJoint cpGrooveJointInit(cpGrooveJoint joint, Body a, Body b, [Deref] Vect groove_a, 
			[Deref] Vect groove_b, [Deref] Vect anchorB);

	[Static] cpConstraint cpGrooveJointNew(Body a, Body b, [Deref] Vect groove_a, [Deref] Vect groove_b, 
			[Deref] Vect anchorB);

	[Static,Value] Vect cpGrooveJointGetGrooveA([Const] cpConstraint constraint);

	[Static] void cpGrooveJointSetGrooveA(cpConstraint constraint, [Deref] Vect grooveA);

	[Static,Value] Vect cpGrooveJointGetGrooveB([Const] cpConstraint constraint);

	[Static] void cpGrooveJointSetGrooveB(cpConstraint constraint, [Deref] Vect grooveB);

	[Static,Value] Vect cpGrooveJointGetAnchorB([Const] cpConstraint constraint);

	[Static] void cpGrooveJointSetAnchorB(cpConstraint constraint, [Deref] Vect anchorB);
};


// ---------------------------------------------------------------------------------------------------------
// cpHastySpace.h
//----------------------------------------------------------------------------------------------------------

interface cpHastySpace
{
	[Static] Space cpHastySpaceNew();
	[Static] void cpHastySpaceFree(Space space);
	[Static] void cpHastySpaceSetThreads(Space space, uint threads);
	[Static] uint cpHastySpaceGetThreads(Space space);
	[Static] void cpHastySpaceStep(Space space, cpFloat dt);
};


// ---------------------------------------------------------------------------------------------------------
// cpHastySpace.h
//----------------------------------------------------------------------------------------------------------

interface cpPinJoint
{	
	[Static] cpBool cpConstraintIsPinJoint([Const] cpConstraint constraint);

	[Static] cpPinJoint cpPinJointAlloc();

	[Static] cpPinJoint cpPinJointInit(cpPinJoint joint, Body a, Body b, 
				[Deref] Vect anchorA, [Deref] Vect anchorB);

	[Static] cpConstraint cpPinJointNew(Body a, Body b, [Deref] Vect anchorA, [Deref] Vect anchorB);

	[Static,Value] Vect cpPinJointGetAnchorA([Const] cpConstraint constraint);

	[Static] void cpPinJointSetAnchorA(cpConstraint constraint, [Deref] Vect anchorA);

	[Static,Value] Vect cpPinJointGetAnchorB([Const] cpConstraint constraint);

	[Static] void cpPinJointSetAnchorB(cpConstraint constraint, [Deref] Vect anchorB);

	[Static] cpFloat cpPinJointGetDist([Const] cpConstraint constraint);

	[Static] void cpPinJointSetDist(cpConstraint constraint, cpFloat dist);
};


// ---------------------------------------------------------------------------------------------------------
// cpPivotJoint.h
//----------------------------------------------------------------------------------------------------------

interface cpPivotJoint
{
	[Static] cpBool cpConstraintIsPivotJoint([Const] cpConstraint constraint);

	[Static] cpPivotJoint cpPivotJointAlloc();

	[Static] cpPivotJoint cpPivotJointInit(cpPivotJoint joint, Body a, Body b, [Deref] Vect anchorA, [Deref] Vect anchorB);

	[Static] cpConstraint cpPivotJointNew(Body a, Body b, [Deref] Vect pivot);

	[Static] cpConstraint cpPivotJointNew2(Body a, Body b, [Deref] Vect anchorA, [Deref] Vect anchorB);

	[Static,Value] Vect cpPivotJointGetAnchorA([Const] cpConstraint constraint);

	[Static] void cpPivotJointSetAnchorA(cpConstraint constraint, [Deref] Vect anchorA);

	[Static,Value] Vect cpPivotJointGetAnchorB([Const] cpConstraint constraint);

	[Static] void cpPivotJointSetAnchorB(cpConstraint constraint, [Deref] Vect anchorB);
};


// ---------------------------------------------------------------------------------------------------------
// cpPolyline.h
//----------------------------------------------------------------------------------------------------------

interface cpPolyline
{
	[Static] void cpPolylineFree(cpPolyline line);

	[Static] cpBool cpPolylineIsClosed(cpPolyline line);

	[Static] cpPolyline cpPolylineSimplifyCurves(cpPolyline line, cpFloat tol);

	[Static] cpPolyline cpPolylineSimplifyVertexes(cpPolyline line, cpFloat tol);

	[Static] cpPolyline cpPolylineToConvexHull(cpPolyline line, cpFloat tol);
};


interface cpPolylineSet
{
	[Static] cpPolylineSet cpPolylineSetAlloc();

	[Static] cpPolylineSet cpPolylineSetInit(cpPolylineSet set);

	[Static] cpPolylineSet cpPolylineSetNew();

	[Static] void cpPolylineSetDestroy(cpPolylineSet set, cpBool freePolylines);

	[Static] void cpPolylineSetFree(cpPolylineSet set, cpBool freePolylines);

	[Static] void cpPolylineSetCollectSegment([Deref] Vect v0, [Deref] Vect v1, cpPolylineSet lines);

	[Static] cpPolylineSet cpPolylineConvexDecomposition(cpPolyline line, cpFloat tol);
};


// ---------------------------------------------------------------------------------------------------------
// cpPolyShape.h
//----------------------------------------------------------------------------------------------------------

interface cpPolyShape
{
	[Static] cpPolyShape cpPolyShapeAlloc();

	[Static] cpPolyShape cpPolyShapeInit(cpPolyShape poly, Body body, int count, 
				[Const,Cast="cpVect*"] double[] verts, [Deref] cpTransform transform, cpFloat radius);

	// TODO THIS IS GOING TO FAIL
	[Static] cpPolyShape cpPolyShapeInitRaw(cpPolyShape poly, Body body, int count, [Const,Cast="cpVect*"] double[] verts, cpFloat radius);

	// TODO THIS IS GOING TO FAIL
	[Static] Shape cpPolyShapeNew(Body body, int count, [Const,Cast="cpVect*"] double[] verts, [Deref] cpTransform transform, cpFloat radius);

	// TODO THIS IS GOING TO FAIL
	[Static] Shape cpPolyShapeNewRaw(Body body, int count, [Const,Cast="cpVect*"] double[] verts, cpFloat radius);

	[Static] cpPolyShape cpBoxShapeInit(cpPolyShape poly, Body body, cpFloat width, cpFloat height, cpFloat radius);

	[Static] cpPolyShape cpBoxShapeInit2(cpPolyShape poly, Body body, [Deref] cpBB box, cpFloat radius);

	[Static] Shape cpBoxShapeNew(Body body, cpFloat width, cpFloat height, cpFloat radius);

	[Static] Shape cpBoxShapeNew2(Body body, [Deref] cpBB box, cpFloat radius);

	[Static] int cpPolyShapeGetCount([Const] Shape shape);

	[Static,Value] Vect cpPolyShapeGetVert([Const] Shape shape, int index);

	[Static] cpFloat cpPolyShapeGetRadius([Const] Shape shape);
};


// ---------------------------------------------------------------------------------------------------------
// cpRatchetJoint.h
//----------------------------------------------------------------------------------------------------------

interface cpRatchetJoint
{
	[Static] cpBool cpConstraintIsRatchetJoint([Const] cpConstraint constraint);

	[Static] cpRatchetJoint cpRatchetJointAlloc();

	[Static] cpRatchetJoint cpRatchetJointInit(cpRatchetJoint joint, Body a, Body b, cpFloat phase, cpFloat ratchet);

	[Static] cpConstraint cpRatchetJointNew(Body a, Body b, cpFloat phase, cpFloat ratchet);

	[Static] cpFloat cpRatchetJointGetAngle([Const] cpConstraint constraint);

	[Static] void cpRatchetJointSetAngle(cpConstraint constraint, cpFloat angle);

	[Static] cpFloat cpRatchetJointGetPhase([Const] cpConstraint constraint);

	[Static] void cpRatchetJointSetPhase(cpConstraint constraint, cpFloat phase);

	[Static] cpFloat cpRatchetJointGetRatchet([Const] cpConstraint constraint);

	[Static] void cpRatchetJointSetRatchet(cpConstraint constraint, cpFloat ratchet);
};


// ---------------------------------------------------------------------------------------------------------
// cpRotaryLimitJoint
//----------------------------------------------------------------------------------------------------------

interface cpRotaryLimitJoint
{
	[Static] cpBool cpConstraintIsRotaryLimitJoint([Const] cpConstraint constraint);

	[Static] cpRotaryLimitJoint cpRotaryLimitJointAlloc();

	[Static] cpRotaryLimitJoint cpRotaryLimitJointInit(cpRotaryLimitJoint joint, Body a, Body b, cpFloat min, cpFloat max);
	
	[Static] cpConstraint cpRotaryLimitJointNew(Body a, Body b, cpFloat min, cpFloat max);

	[Static] cpFloat cpRotaryLimitJointGetMin([Const] cpConstraint constraint);

	[Static] void cpRotaryLimitJointSetMin(cpConstraint constraint, cpFloat min);

	[Static] cpFloat cpRotaryLimitJointGetMax([Const] cpConstraint constraint);

	[Static] void cpRotaryLimitJointSetMax(cpConstraint constraint, cpFloat max);
};


// ---------------------------------------------------------------------------------------------------------
// cpSlideJoint
//----------------------------------------------------------------------------------------------------------

interface cpSlideJoint
{
	[Static] cpBool cpConstraintIsSlideJoint([Const] cpConstraint constraint);

	[Static] cpSlideJoint cpSlideJointAlloc();

	[Static] cpSlideJoint cpSlideJointInit(cpSlideJoint joint, Body a, Body b, 
				[Deref] Vect anchorA, [Deref] Vect anchorB, cpFloat min, cpFloat max);

	[Static] cpConstraint cpSlideJointNew(Body a, Body b, [Deref] Vect anchorA, [Deref] Vect anchorB, 
				cpFloat min, cpFloat max);

	[Static,Value] Vect cpSlideJointGetAnchorA([Const] cpConstraint constraint);

	[Static] void cpSlideJointSetAnchorA(cpConstraint constraint, [Deref] Vect anchorA);

	[Static,Value] Vect cpSlideJointGetAnchorB([Const] cpConstraint constraint);

	[Static] void cpSlideJointSetAnchorB(cpConstraint constraint, [Deref] Vect anchorB);

	[Static] cpFloat cpSlideJointGetMin([Const] cpConstraint constraint);

	[Static] void cpSlideJointSetMin(cpConstraint constraint, cpFloat min);

	[Static] cpFloat cpSlideJointGetMax([Const] cpConstraint constraint);

	[Static] void cpSlideJointSetMax(cpConstraint constraint, cpFloat max);
};


// ---------------------------------------------------------------------------------------------------------
// cpSpaceHash.c
//----------------------------------------------------------------------------------------------------------

interface cpSpaceHash {};


// ---------------------------------------------------------------------------------------------------------
// cpBBTree.c
//----------------------------------------------------------------------------------------------------------

interface cpBBTree {};


// ---------------------------------------------------------------------------------------------------------
// cpSpatialIndex.h
//----------------------------------------------------------------------------------------------------------
typedef cpHashValue uint;

//interface cpSpatialIndexClass {};

[Internal="cpSpatialIndex", NoDelete]
interface SpatialIndex
{
	[Static] cpSpaceHash cpSpaceHashAlloc();

// CP_EXPORT cpSpatialIndex* cpSpaceHashInit(cpSpaceHash *hash, cpFloat celldim, int numcells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);

// CP_EXPORT cpSpatialIndex* cpSpaceHashNew(cpFloat celldim, int cells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);

	[Static] void cpSpaceHashResize(cpSpaceHash hash, cpFloat celldim, int numcells);

	[Static] cpBBTree cpBBTreeAlloc();

// CP_EXPORT cpSpatialIndex* cpBBTreeInit(cpBBTree *tree, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);

// CP_EXPORT cpSpatialIndex* cpBBTreeNew(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);

	[CObject] void cpBBTreeOptimize();

// CP_EXPORT void cpBBTreeSetVelocityFunc(cpSpatialIndex *index, cpBBTreeVelocityFunc func);

	// [Static] cpSweep1D cpSweep1DAlloc();

// CP_EXPORT cpSpatialIndex* cpSweep1DInit(cpSweep1D *sweep, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);

// CP_EXPORT cpSpatialIndex* cpSweep1DNew(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);

	[CObject] void cpSpatialIndexFree();

	// [Static] void cpSpatialIndexCollideStatic(cpSpatialIndex dynamicIndex, cpSpatialIndex staticIndex, 
	// 		cpSpatialIndexQueryFunc func, VoidPtr data);

	[CObject] void cpSpatialIndexDestroy();

	[CObject] int cpSpatialIndexCount();

	// [CObject] void cpSpatialIndexEach(cpSpatialIndexIteratorFunc func, VoidPtr data)

	[CObject] cpBool cpSpatialIndexContains(VoidPtr obj, cpHashValue hashid);

	[CObject] void cpSpatialIndexInsert(VoidPtr obj, cpHashValue hashid);

	[CObject] void cpSpatialIndexRemove(VoidPtr obj, cpHashValue hashid);

	[CObject] void cpSpatialIndexReindex();

	[CObject] void cpSpatialIndexReindexObject(VoidPtr obj, cpHashValue hashid);

// static inline void cpSpatialIndexQuery(cpSpatialIndex *index, void *obj, cpBB bb, 
				// cpSpatialIndexQueryFunc func, void *data)

// static inline void cpSpatialIndexSegmentQuery(cpSpatialIndex *index, void *obj, Vect a, Vect b, 
				// cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)

// static inline void cpSpatialIndexReindexQuery(cpSpatialIndex *index, cpSpatialIndexQueryFunc func, void *data)
};


// ---------------------------------------------------------------------------------------------------------
// chipmunk.h + cpRobust.h
//----------------------------------------------------------------------------------------------------------
[NoDelete]
interface Math 
{
	[Static, Internal="cpMomentForCircle"] cpFloat momentForCircle(cpFloat m, cpFloat r1, cpFloat r2, [Deref] Vect offset);

	[Static, Internal="cpAreaForCircle"] cpFloat areaForCircle(cpFloat r1, cpFloat r2);
	
	[Static, Internal="cpMomentForSegment"] cpFloat momentForSegment(cpFloat m, [Deref,Cast="cpVect*"] Vect a, [Deref] Vect b, cpFloat radius);
	
	[Static, Internal="cpMomentForPoly"] cpFloat momentForPoly( cpFloat m, int count, [Const,Cast="cpVect*"] double[] verts, 
							[Deref] Vect offset, cpFloat radius);

	[Static, Internal="cpAreaForSegment"] cpFloat areaForSegment([Deref] Vect a, [Deref] Vect b, cpFloat radius);

	[Static, Internal="cpAreaForPoly"] cpFloat areaForPoly([Const] int count, [Const,Cast="cpVect*"] double[] verts, cpFloat radius);

	[Static,Value] Vect cpCentroidForPoly([Const] int count, [Cast="cpVect*"] double[] verts);

	[Static] cpFloat cpMomentForBox(cpFloat m, cpFloat width, cpFloat height);

	[Static] cpFloat cpMomentForBox2(cpFloat m, [Deref] cpBB box);

	[Static] int cpConvexHull(int count,  [Const,Cast="cpVect*"] double[] verts, 
							[Cast="cpVect*"] double[] result, int[] first, cpFloat tol);

	[Static,Value] Vect cpClosetPointOnSegment( [Deref] Vect p, 
							 [Deref] Vect a, [Deref] Vect b);

	// cpRobust.h
	[Static] cpBool cpCheckPointGreater([Const,Deref] Vect a, [Const,Deref] Vect b, [Const,Deref] Vect c);

	[Static] cpBool cpCheckAxis([Deref] Vect v0, [Deref] Vect v1, [Deref] Vect p, [Deref] Vect n);
};
